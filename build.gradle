plugins {
    id 'com.github.johnrengelman.shadow' version '4.0.2'
    id 'com.github.ben-manes.versions' version '0.15.0'
    id 'de.undercouch.download' version '3.2.0'
}

import org.apache.tools.ant.filters.ReplaceTokens

allprojects {
    apply plugin: "idea"

    repositories  {
        mavenLocal()
        mavenCentral()
        jcenter()
        maven {
            name 'spigot-repo'
            url 'https://hub.spigotmc.org/nexus/content/repositories/snapshots/'
        }
        maven {
            name 'civ-repo'
            url 'https://build.devotedmc.com/plugin/repository/everything/'
        }

        idea {
            module {
                downloadJavadoc = true
            }
        }
    }

    configurations {
        server {
            description = 'dependencies that the server should have'
            transitive = true
        }

        serverOnly {
            description = 'dependencies that the only the server should have'
            transitive = true
            exclude group: 'org.spigotmc', module: 'spigot-api'

            extendsFrom server
        }

        compileOnly.extendsFrom(server)
    }

    dependencies {
        serverOnly group: 'org.spigotmc', name: 'spigot', version: project.property('apiversion')
        server group: 'org.bukkit', name: 'bukkit', version: project.property('apiversion')
        server group: 'org.bukkit', name: 'craftbukkit', version: project.property('apiversion')
        compileOnly group: 'org.spigotmc', name: 'spigot-api', version: project.property('apiversion')
    }

    def spigotBuildDir = new File("${project.buildDir}/spigot/")

    task buildSpigot(type: Exec) {
        if (hasSpigot()) {
            enabled = false;
        } else {
            dependsOn 'downloadBuildTools'

            if (System.getProperty('os.name').toLowerCase().contains('windows')) {
                commandLine 'where git'.execute().text.trim().replace('cmd\\git.exe', 'bin\\sh.exe'), '-login', '-c', 'java -jar BuildTools.jar --rev ' + project.property('apibuildtoolversion')
            } else {
                commandLine 'java -jar BuildTools.jar --rev ' + project.property('apibuildtoolversion')
            }
            workingDir = spigotBuildDir
        }
    }

    task downloadBuildTools(type: de.undercouch.gradle.tasks.download.Download) {
        spigotBuildDir.mkdirs()
        src project.property('buildtoolurl')
        dest new File(spigotBuildDir, 'BuildTools.jar')
    }
}

subprojects {
    apply plugin: 'java'

    compileJava.dependsOn(buildSpigot)

    tasks.withType(Jar) {
        destinationDir = file("$rootDir/build/libs")
    }

    configurations {
        pluginDependencies {
            description = 'plugins that this plugin depends on'
        }

        nonPluginDependencies {
            description = 'libraries that this plugin depends on that are not plugins'
            transitive = true
        }

        compileOnly.extendsFrom(pluginDependencies)
        compileOnly.extendsFrom(nonPluginDependencies)
    }
    
//    dependencies {
//        compile group: 'com.google.inject', name: 'guice', version: '4.0'
//    }

    task copyDependencyPlugins(type: Copy) {
        from  configurations.pluginDependencies
        into "$rootDir/libs/dependencies"
    }

    build.dependsOn(copyDependencyPlugins)

    processResources {
        filter ReplaceTokens, tokens: [
                'apiversion':    project.property('apiversion'),
                'name':          project.property('name'),
                'mainClass':     project.property('mainClass'),
                'version':       project.property('version'),
                'author':        project.property('author'),
                'description':   project.property('description'),
                'website':       project.property('website')
        ]
    }
}

task copyPluginsToTestserver(type: Copy) {
    from "${buildDir}/libs"
    from "${buildDir}/libs/dependencies"
    into "testserver/plugins"
}

copyPluginsToTestserver.dependsOn(subprojects.build)

task extractServerJar(type: Copy) {
    group = 'other'
    from {
        configurations.server
    }
    include("spigot-" + project.property("apiversion") + ".jar")
    rename("spigot-" + project.property("apiversion") + ".jar", "server.jar")
    into "testserver/"
}

task setupDevServer(dependsOn: 'extractServerJar', type: Copy) {
    group = 'other'
    from 'config/serverfiles'
    into 'testserver'
}

task prepareDevServer(dependsOn: ['buildSpigot', 'setupDevServer', 'copyPluginsToTestserver']) {}

task startDevServer(dependsOn: [prepareDevServer], type: JavaExec) {
    group = 'test'
    description = 'Starts a spigot test server'
    classpath configurations.server
    main = 'org.bukkit.craftbukkit.Main'
    workingDir = 'testserver/'
    standardInput = System.in
}

task wrapper(type: Wrapper) {
    group = 'build setup'
    description = 'Generates and updates Gradle wrapper files.'
    gradleVersion = '4.1'
}

def hasSpigot() {
    def groupId = 'org.spigotmc'
    def version = project.property('apiversion')
    return hasArtifact(groupId, 'spigot-api', version) && hasArtifact(groupId, 'spigot', version)
}

def hasArtifact(groupId, artifactId, version) {
    def localMavenRepo = new File(new File(ant.properties['user.home'] as String), '.m2/repository/')
    def file = new File(localMavenRepo, groupId.replace('.', '/') + '/' + artifactId + '/' + version + '/')
    return file.exists()
}



